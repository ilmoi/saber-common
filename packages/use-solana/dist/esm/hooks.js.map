{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/hooks.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAGtC;;GAEG;AACH,MAAM,UAAU,SAAS;IAGvB,MAAM,OAAO,GAAG,SAAS,EAAc,CAAC;IACxC,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACtC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAA2B,EAAE;IAC7D,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,GAC3C,SAAS,EAAqB,CAAC;IACjC,IACE,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAA;QAClB,CAAC,SAAS;QACV,CAAC,MAAM,CAAC,SAAS;QACjB,gBAAgB,EAChB;QACA,OAAO,IAAI,CAAC;KACb;IACD,OAAO,MAAyB,CAAC;AACnC,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,oBAAoB;IAClC,MAAM,OAAO,GAAG,SAAS,EAAqB,CAAC;IAC/C,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACnC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,aAAa;IAC3B,OAAO,oBAAoB,EAAE,CAAC,UAAU,CAAC;AAC3C,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,iBAAiB;IAC/B,OAAO,oBAAoB,EAAE,CAAC,cAAc,CAAC;AAC/C,CAAC","sourcesContent":["import type { Connection } from \"@solana/web3.js\";\n\nimport type { DefaultWalletType, UnknownWalletType, WalletTypeEnum } from \".\";\nimport type { ConnectedWallet } from \"./adapters/types\";\nimport type { UseSolana } from \"./context\";\nimport { useSolana } from \"./context\";\nimport type { ConnectionContext } from \"./utils/useConnectionInternal\";\n\n/**\n * Gets the current Solana wallet.\n */\nexport function useWallet<\n  WalletType extends WalletTypeEnum<WalletType> = typeof DefaultWalletType\n>(): UseSolana<WalletType> {\n  const context = useSolana<WalletType>();\n  if (!context) {\n    throw new Error(\"wallet not loaded\");\n  }\n  return context;\n}\n\n/**\n * Gets the current Solana wallet, returning null if it is not connected.\n */\nexport const useConnectedWallet = (): ConnectedWallet | null => {\n  const { wallet, connected, walletActivating } =\n    useWallet<UnknownWalletType>();\n  if (\n    !wallet?.connected ||\n    !connected ||\n    !wallet.publicKey ||\n    walletActivating\n  ) {\n    return null;\n  }\n  return wallet as ConnectedWallet;\n};\n\n/**\n * Loads the connection context\n * @returns\n */\nexport function useConnectionContext(): ConnectionContext {\n  const context = useSolana<UnknownWalletType>();\n  if (!context) {\n    throw new Error(\"Not in context\");\n  }\n  return context;\n}\n\n/**\n * Gets the read connection\n * @returns\n */\nexport function useConnection(): Connection {\n  return useConnectionContext().connection;\n}\n\n/**\n * Gets the send connection\n * @returns\n */\nexport function useSendConnection(): Connection {\n  return useConnectionContext().sendConnection;\n}\n"]}