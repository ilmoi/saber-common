{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/adapters/secret-key/index.ts"],"names":[],"mappings":"AAKA,OAAO,EACL,6BAA6B,EAC7B,YAAY,GACb,MAAM,yBAAyB,CAAC;AAEjC,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,YAAY,MAAM,eAAe,CAAC;AAIzC;;GAEG;AACH,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAMhD;QACE,KAAK,EAAE,CAAC;QA8CV,YAAO,GAAG,CAAC,IAAc,EAAiB,EAAE;YAC1C,MAAM,SAAS,GAAG,IAIL,CAAC;YACd,MAAM,SAAS,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,SAAS,CAAC;YACvC,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;aACxC;YACD,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAC7B,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAClD,CAAC;YACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACrC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC;QA9DA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,2BAA2B,CAC/B,WAAwB,EACxB,WAAuB,EACvB,WAAwB,EACxB,IAA8B;QAE9B,OAAO,MAAM,6BAA6B,CACxC,IAAuB,EACvB,WAAW,EACX,WAAW,EACX,IAAI,CACL,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,YAA2B;QAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SACtC;QACD,OAAO,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,SAAS;;QACX,OAAO,MAAA,IAAI,CAAC,UAAU,mCAAI,IAAI,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,WAAwB;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACrC;QACD,OAAO,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAqBD,UAAU;QACR,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACzB;IACH,CAAC;CACF","sourcesContent":["import type {\n  Broadcaster,\n  PendingTransaction,\n  SignAndBroadcastOptions,\n} from \"@saberhq/solana-contrib\";\nimport {\n  doSignAndBroadcastTransaction,\n  SignerWallet,\n} from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\nimport EventEmitter from \"eventemitter3\";\n\nimport type { ConnectedWallet, WalletAdapter } from \"../types\";\n\n/**\n * Adapter backed by a secret key.\n */\nexport class SecretKeyAdapter extends EventEmitter implements WalletAdapter {\n  _wallet?: SignerWallet;\n  _publicKey?: PublicKey;\n\n  _connected: boolean;\n\n  constructor() {\n    super();\n    this._connected = false;\n  }\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  get autoApprove(): boolean {\n    return false;\n  }\n\n  async signAndBroadcastTransaction(\n    transaction: Transaction,\n    _connection: Connection,\n    broadcaster: Broadcaster,\n    opts?: SignAndBroadcastOptions\n  ): Promise<PendingTransaction> {\n    return await doSignAndBroadcastTransaction(\n      this as ConnectedWallet,\n      transaction,\n      broadcaster,\n      opts\n    );\n  }\n\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const wallet = this._wallet;\n    if (!wallet) {\n      return Promise.resolve(transactions);\n    }\n    return wallet.signAllTransactions(transactions);\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey ?? null;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const wallet = this._wallet;\n    if (!wallet) {\n      return Promise.resolve(transaction);\n    }\n    return wallet.signTransaction(transaction);\n  }\n\n  connect = (args?: unknown): Promise<void> => {\n    const argsTyped = args as\n      | {\n          secretKey?: number[];\n        }\n      | undefined;\n    const secretKey = argsTyped?.secretKey;\n    if (!secretKey || !Array.isArray(secretKey)) {\n      throw new Error(\"Secret key missing.\");\n    }\n    this._wallet = new SignerWallet(\n      Keypair.fromSecretKey(Uint8Array.from(secretKey))\n    );\n    this._publicKey = this._wallet.publicKey;\n    this._connected = true;\n    this.emit(\"connect\", this.publicKey);\n    return Promise.resolve();\n  };\n\n  disconnect(): void {\n    if (this._wallet) {\n      this._wallet = undefined;\n      this._publicKey = undefined;\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit(\"disconnect\");\n    }\n  }\n}\n"]}