{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/adapters/ledger/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type Transport from \"@ledgerhq/hw-transport\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport type {\n  Broadcaster,\n  PendingTransaction,\n  SignAndBroadcastOptions,\n} from \"@saberhq/solana-contrib\";\nimport { doSignAndBroadcastTransaction } from \"@saberhq/solana-contrib\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport EventEmitter from \"eventemitter3\";\n\nimport type { ConnectedWallet, WalletAdapter } from \"../types\";\nimport { getPublicKey, getSolanaDerivationPath, signTransaction } from \"./core\";\n\nconst DEFAULT_DERIVATION_PATH = getSolanaDerivationPath();\n\nexport interface LedgerHDWalletPath {\n  account?: number;\n  change?: number;\n}\n\n/**\n * An account associated with the connected Ledger device.\n */\nexport interface LedgerHDWalletAccount extends LedgerHDWalletPath {\n  key: PublicKey;\n}\n\nexport class LedgerWalletAdapter extends EventEmitter implements WalletAdapter {\n  private _connecting = false;\n  private _publicKey: PublicKey | null = null;\n  private _transport: Transport | null = null;\n  private _derivationPath: Buffer = DEFAULT_DERIVATION_PATH;\n\n  constructor() {\n    super();\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey ?? null;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return false;\n  }\n\n  async signAndBroadcastTransaction(\n    transaction: Transaction,\n    _connection: Connection,\n    broadcaster: Broadcaster,\n    opts?: SignAndBroadcastOptions\n  ): Promise<PendingTransaction> {\n    return await doSignAndBroadcastTransaction(\n      this as ConnectedWallet,\n      transaction,\n      broadcaster,\n      opts\n    );\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    const result: Transaction[] = [];\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i];\n      if (transaction) {\n        const signed = await this.signTransaction(transaction);\n        result.push(signed);\n      }\n    }\n\n    return result;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    if (!this._transport || !this._publicKey) {\n      throw new Error(\"Not connected to Ledger\");\n    }\n\n    const signature = await signTransaction(\n      this._transport,\n      transaction,\n      this._derivationPath\n    );\n\n    transaction.addSignature(this._publicKey, signature);\n\n    return transaction;\n  }\n\n  async connect(args?: unknown): Promise<void> {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create();\n      if (args) {\n        const { account, change } = args as {\n          account?: number;\n          change?: number;\n        };\n        this._derivationPath = getSolanaDerivationPath(account, change);\n        this._publicKey = await getPublicKey(\n          this._transport,\n          this._derivationPath\n        );\n      } else {\n        this._publicKey = await getPublicKey(this._transport);\n      }\n      this.emit(\"connect\", this._publicKey);\n    } catch (error) {\n      await this.disconnect();\n      throw new LedgerError(error as Error);\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    let emit = false;\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit(\"disconnect\");\n    }\n  }\n\n  /**\n   * Ledger transport.\n   */\n  get transport(): Transport | null {\n    return this._transport;\n  }\n\n  /**\n   * Fetches accounts associated with the given derivation paths.\n   *\n   * @param paths\n   * @returns\n   */\n  static async fetchAccountsForPaths(\n    paths: LedgerHDWalletPath[]\n  ): Promise<LedgerHDWalletAccount[]> {\n    let transport: Transport | null = null;\n    try {\n      transport = await TransportWebUSB.create();\n      const ret = [];\n      for (const path of paths) {\n        const derivationPath = getSolanaDerivationPath(\n          path.account,\n          path.change\n        );\n        ret.push({\n          ...path,\n          key: await getPublicKey(transport, derivationPath),\n        });\n      }\n      return ret;\n    } catch (error) {\n      throw new LedgerError(error as Error);\n    } finally {\n      await transport?.close();\n    }\n  }\n}\n\nexport class LedgerError extends Error {\n  constructor(error: Error) {\n    super(`Ledger Error: ${error.message}`);\n    this.name = \"LedgerError\";\n  }\n}\n"]}