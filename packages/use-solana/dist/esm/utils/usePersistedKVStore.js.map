{"version":3,"file":"usePersistedKVStore.js","sourceRoot":"","sources":["../../../src/utils/usePersistedKVStore.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAIzD,MAAM,UAAU,mBAAmB,CACjC,GAAW,EACX,YAAe,EACf,cAA8B;IAE9B,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAW,IAAI,CAAC,CAAC;IAEnD,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,CAAC,KAAK,IAAI,EAAE;YACf,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClD,IAAI,WAAW,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAC;gBACpD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAM,CAAC,CAAC;aACxC;QACH,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,EAAE,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC;IAE1B,MAAM,oBAAoB,GAAG,WAAW,CACtC,KAAK,EAAE,QAAkB,EAAE,EAAE;QAC3B,MAAM,OAAO,GAAG,KAAK,KAAK,QAAQ,CAAC;QACnC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QACD,IAAI,QAAQ,KAAK,IAAI,EAAE;YACrB,MAAM,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjC,QAAQ,CAAC,YAAY,CAAC,CAAC;SACxB;aAAM;YACL,MAAM,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxD,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACpB;IACH,CAAC,EACD,CAAC,KAAK,EAAE,YAAY,EAAE,cAAc,EAAE,GAAG,CAAC,CAC3C,CAAC;IAEF,OAAO,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,EAAE,oBAAoB,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport type { StorageAdapter } from \"../storage\";\n\nexport function usePersistedKVStore<T>(\n  key: string,\n  defaultState: T,\n  storageAdapter: StorageAdapter\n): [T, (newState: T | null) => Promise<void>] {\n  const [state, setState] = useState<T | null>(null);\n\n  useEffect(() => {\n    void (async () => {\n      const storedState = await storageAdapter.get(key);\n      if (storedState) {\n        console.debug(`Restoring user settings for ${key}`);\n        setState(JSON.parse(storedState) as T);\n      }\n    })();\n  }, [key, storageAdapter]);\n\n  const setLocalStorageState = useCallback(\n    async (newState: T | null) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      if (newState === null) {\n        await storageAdapter.remove(key);\n        setState(defaultState);\n      } else {\n        await storageAdapter.set(key, JSON.stringify(newState));\n        setState(newState);\n      }\n    },\n    [state, defaultState, storageAdapter, key]\n  );\n\n  return [state ?? defaultState, setLocalStorageState];\n}\n"]}