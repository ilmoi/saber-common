{"version":3,"file":"useConnectionInternal.js","sourceRoot":"","sources":["../../../src/utils/useConnectionInternal.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,0BAA0B,EAAE,MAAM,yBAAyB,CAAC;AAErE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAGhC,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAiB5D,MAAM,oBAAoB,GAAG,CAC3B,OAAgC,EACd,EAAE,CACpB,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,MAAM,CAC/C,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAChB,GAAG,GAAG;IACN,CAAC,CAAY,CAAC,EAAE;QACd,GAAG,CAAC;QACJ,GAAG,OAAO,CAAC,CAAY,CAAC;KACzB;CACF,CAAC,EACF,0BAA0B,CAC3B,CAAC;AASJ;;;GAGG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC;AACpC,0BAA0B;AAC1B,cAAc,GAAG,cAAc,EAC/B,cAAc,GAAG,0BAA0B,EAC3C,UAAU,GAAG,WAAW,EACxB,cAAc,GACC,EAAqB,EAAE;IACtC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,mBAAmB,CAC/C,oBAAoB,EACpB,cAAc,EACd,cAAc,CACf,CAAC;IACF,MAAM,SAAS,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAClC,MAAM,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,oBAAoB,EAAE,EAAE,YAAY,CAAC,GACrE,mBAAmB,CACjB,2BAA2B,OAAO,EAAE,EACpC,MAAM,EACN,cAAc,CACf,CAAC;IAEJ,MAAM,UAAU,GAAG,OAAO,CACxB,GAAG,EAAE;;QACH,OAAA,IAAI,UAAU,CAAC,QAAQ,EAAE;YACvB,GAAG,oBAAoB;YACvB,UAAU,EAAE,MAAA,oBAAoB,CAAC,UAAU,mCAAI,UAAU;YACzD,UAAU,EAAE,UAAU;SACvB,CAAC,CAAA;KAAA,EACJ,CAAC,UAAU,EAAE,oBAAoB,EAAE,QAAQ,EAAE,UAAU,CAAC,CACzD,CAAC;IACF,MAAM,cAAc,GAAG,OAAO,CAC5B,GAAG,EAAE;;QACH,OAAA,IAAI,UAAU,CAAC,QAAQ,EAAE;YACvB,GAAG,oBAAoB;YACvB,UAAU,EAAE,MAAA,oBAAoB,CAAC,UAAU,mCAAI,UAAU;YACzD,UAAU,EAAE,UAAU;SACvB,CAAC,CAAA;KAAA,EACJ,CAAC,UAAU,EAAE,oBAAoB,EAAE,QAAQ,EAAE,UAAU,CAAC,CACzD,CAAC;IAEF,OAAO;QACL,UAAU;QACV,cAAc;QACd,OAAO;QACP,UAAU;QACV,QAAQ;QACR,YAAY;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type {\n  Network,\n  NetworkConfig,\n  NetworkConfigMap,\n} from \"@saberhq/solana-contrib\";\nimport { DEFAULT_NETWORK_CONFIG_MAP } from \"@saberhq/solana-contrib\";\nimport type { Commitment } from \"@solana/web3.js\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\nimport type { StorageAdapter } from \"../storage\";\nimport { usePersistedKVStore } from \"./usePersistedKVStore\";\n\nexport type PartialNetworkConfigMap = {\n  [N in Network]?: Partial<NetworkConfig>;\n};\n\nexport interface ConnectionContext {\n  connection: Connection;\n  sendConnection: Connection;\n  network: Network;\n  setNetwork: (val: Network) => void | Promise<void>;\n  endpoint: string;\n  setEndpoints: (\n    endpoints: Omit<NetworkConfig, \"name\">\n  ) => void | Promise<void>;\n}\n\nconst makeNetworkConfigMap = (\n  partial: PartialNetworkConfigMap\n): NetworkConfigMap =>\n  Object.entries(DEFAULT_NETWORK_CONFIG_MAP).reduce(\n    (acc, [k, v]) => ({\n      ...acc,\n      [k as Network]: {\n        ...v,\n        ...partial[k as Network],\n      },\n    }),\n    DEFAULT_NETWORK_CONFIG_MAP\n  );\n\nexport interface ConnectionArgs {\n  defaultNetwork?: Network;\n  networkConfigs?: PartialNetworkConfigMap;\n  commitment?: Commitment;\n  storageAdapter: StorageAdapter;\n}\n\n/**\n * Handles the connection to the Solana nodes.\n * @returns\n */\nexport const useConnectionInternal = ({\n  // default to mainnet-beta\n  defaultNetwork = \"mainnet-beta\",\n  networkConfigs = DEFAULT_NETWORK_CONFIG_MAP,\n  commitment = \"confirmed\",\n  storageAdapter,\n}: ConnectionArgs): ConnectionContext => {\n  const [network, setNetwork] = usePersistedKVStore<Network>(\n    \"use-solana/network\",\n    defaultNetwork,\n    storageAdapter\n  );\n  const configMap = makeNetworkConfigMap(networkConfigs);\n  const config = configMap[network];\n  const [{ endpoint, endpointWs, ...connectionConfigArgs }, setEndpoints] =\n    usePersistedKVStore<Omit<NetworkConfig, \"name\">>(\n      `use-solana/rpc-endpoint/${network}`,\n      config,\n      storageAdapter\n    );\n\n  const connection = useMemo(\n    () =>\n      new Connection(endpoint, {\n        ...connectionConfigArgs,\n        commitment: connectionConfigArgs.commitment ?? commitment,\n        wsEndpoint: endpointWs,\n      }),\n    [commitment, connectionConfigArgs, endpoint, endpointWs]\n  );\n  const sendConnection = useMemo(\n    () =>\n      new Connection(endpoint, {\n        ...connectionConfigArgs,\n        commitment: connectionConfigArgs.commitment ?? commitment,\n        wsEndpoint: endpointWs,\n      }),\n    [commitment, connectionConfigArgs, endpoint, endpointWs]\n  );\n\n  return {\n    connection,\n    sendConnection,\n    network,\n    setNetwork,\n    endpoint,\n    setEndpoints,\n  };\n};\n"]}