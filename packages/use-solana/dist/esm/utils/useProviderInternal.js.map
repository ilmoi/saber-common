{"version":3,"file":"useProviderInternal.js","sourceRoot":"","sources":["../../../src/utils/useProviderInternal.ts"],"names":[],"mappings":"AAIA,OAAO,EACL,wBAAwB,EACxB,uBAAuB,EACvB,sBAAsB,GACvB,MAAM,yBAAyB,CAAC;AAEjC,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAGhC,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;AA2CnD,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAClC,UAAU,EACV,cAAc,GAAG,UAAU,EAC3B,oBAAoB,GAAG,CAAC,cAAc,CAAC,EACvC,MAAM,EACN,UAAU,GAAG,WAAW,EACxB,cAAc,GAAG,wBAAwB,GACzB,EAAe,EAAE;IACjC,MAAM,QAAQ,GAAG,OAAO,CACtB,GAAG,EAAE,CACH,IAAI,sBAAsB,CAAC,UAAU,EAAE;QACrC,UAAU;KACX,CAAC,EACJ,CAAC,UAAU,EAAE,UAAU,CAAC,CACzB,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC;IACpC,MAAM,SAAS,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC;IACpC,MAAM,WAAW,GAAG,OAAO,CACzB,GAAG,EAAE,CACH,MAAM,IAAI,SAAS,IAAI,SAAS;QAC9B,CAAC,CAAC,IAAI,uBAAuB,CACzB,qBAAqB,CAAC,IAAI,CAAC;YACzB,UAAU;YACV,oBAAoB;YACpB,MAAM,EAAE,MAAyB;YACjC,IAAI,EAAE,cAAc;SACrB,CAAC,CACH;QACH,CAAC,CAAC,IAAI,EACV;QACE,MAAM;QACN,SAAS;QACT,SAAS;QACT,UAAU;QACV,oBAAoB;QACpB,cAAc;KACf,CACF,CAAC;IAEF,OAAO;QACL,QAAQ;QACR,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type {\n  AugmentedProvider,\n  ReadonlyProvider,\n} from \"@saberhq/solana-contrib\";\nimport {\n  DEFAULT_PROVIDER_OPTIONS,\n  SolanaAugmentedProvider,\n  SolanaReadonlyProvider,\n} from \"@saberhq/solana-contrib\";\nimport type { Commitment, ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\nimport type { ConnectedWallet, WalletAdapter } from \"../adapters/types\";\nimport { WalletAdapterProvider } from \"./provider\";\n\n/**\n * Wallet-related information.\n */\nexport interface UseProvider {\n  /**\n   * Read-only provider.\n   */\n  provider: ReadonlyProvider;\n  /**\n   * {@link Provider} of the currently connected wallet.\n   */\n  providerMut: AugmentedProvider | null;\n}\n\nexport interface UseProviderArgs {\n  /**\n   * Connection.\n   */\n  connection: Connection;\n  /**\n   * Send connection.\n   */\n  sendConnection?: Connection;\n  /**\n   * Broadcast connections.\n   */\n  broadcastConnections?: Connection[];\n  /**\n   * Wallet.\n   */\n  wallet?: WalletAdapter<boolean>;\n  /**\n   * Commitment for the read-only provider.\n   */\n  commitment?: Commitment;\n  /**\n   * Confirm options for the mutable provider.\n   */\n  confirmOptions?: ConfirmOptions;\n}\n\nexport const useProviderInternal = ({\n  connection,\n  sendConnection = connection,\n  broadcastConnections = [sendConnection],\n  wallet,\n  commitment = \"confirmed\",\n  confirmOptions = DEFAULT_PROVIDER_OPTIONS,\n}: UseProviderArgs): UseProvider => {\n  const provider = useMemo(\n    () =>\n      new SolanaReadonlyProvider(connection, {\n        commitment,\n      }),\n    [commitment, connection]\n  );\n\n  const connected = wallet?.connected;\n  const publicKey = wallet?.publicKey;\n  const providerMut = useMemo(\n    () =>\n      wallet && connected && publicKey\n        ? new SolanaAugmentedProvider(\n            WalletAdapterProvider.init({\n              connection,\n              broadcastConnections,\n              wallet: wallet as ConnectedWallet,\n              opts: confirmOptions,\n            })\n          )\n        : null,\n    [\n      wallet,\n      connected,\n      publicKey,\n      connection,\n      broadcastConnections,\n      confirmOptions,\n    ]\n  );\n\n  return {\n    provider,\n    providerMut,\n  };\n};\n"]}