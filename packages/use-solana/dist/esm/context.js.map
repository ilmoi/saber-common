{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/context.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAS9D,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAErC,OAAO,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AAKlD,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AAEtE,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAElE,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AA6B9D,MAAM,gBAAgB,GAAG,CACvB,MAA2B,EAC3B,QAA4B,EAC5B,EAAE;IACF,OAAO,CAAC,GAAG,CACT,gBAAgB,QAAQ,CAAC,IAAI,YAAY,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CACvE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAC1B,OAA6B,EAC7B,QAA4B,EAC5B,EAAE;IACF,OAAO,CAAC,GAAG,CAAC,qBAAqB,QAAQ,CAAC,IAAI,SAAS,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,GAAmB,EAAE,EAAE;IAC7C,IAAI,GAAG,CAAC,KAAK,KAAK,UAAU,CAAC,IAAI,EAAE;QACjC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACnB;SAAM;QACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACpB;AACH,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,iBAAiB,GAAG,CAAgD,EACxE,SAAS,GAAG,gBAAgB,EAC5B,YAAY,GAAG,mBAAmB,EAClC,OAAO,GAAG,cAAc,EACxB,cAAc,GAAG,qBAAqB,EACtC,eAAe,GAAG,wBAAoE,EACtF,aAAa;AAEb,mBAAmB;AACnB,oBAAoB,EACpB,cAAc,EAEd,GAAG,cAAc,KACY,EAAE,EAAyB,EAAE;IAC1D,MAAM,aAAa,GAAG,qBAAqB,CAAC;QAC1C,GAAG,cAAc;QACjB,cAAc;KACf,CAAC,CAAC;IACH,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,aAAa,CAAC;IAC5C,MAAM,SAAS,GAAG,iBAAiB,CAAa;QAC9C,SAAS;QACT,YAAY;QACZ,OAAO;QACP,QAAQ;QACR,OAAO;QACP,cAAc;QACd,eAAe;QACf,aAAa;KACd,CAAC,CAAC;IACH,MAAM,WAAW,GAAG,mBAAmB,CAAC;QACtC,UAAU,EAAE,aAAa,CAAC,UAAU;QACpC,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,cAAc,EAAE,aAAa,CAAC,cAAc;QAC5C,UAAU,EAAE,cAAc,CAAC,UAAU;QAErC,oBAAoB;QACpB,cAAc;KACf,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,SAAS;QACZ,GAAG,aAAa;QAChB,GAAG,WAAW;KACf,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,eAAe,CAG5B,iBAAiB,CAAC,CAAC;AAKrB;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAE5B,EACA,QAAQ,EACR,GAAG,IAAI,EACmB,EAAE,EAAE,CAAC,CAC/B,KAAC,MAAM,CAAC,QAAQ,IAAC,YAAY,EAAE,IAAI,YAAG,QAAQ,GAAmB,CAClE,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,GAAkD,EAAE,CAC3E,YAAY,CACV,MAGC,CACF,CAAC","sourcesContent":["import type { ReactNode } from \"react\";\nimport type { Container } from \"unstated-next\";\nimport { createContainer, useContainer } from \"unstated-next\";\n\nimport type {\n  DefaultWalletType,\n  WalletAdapter,\n  WalletProviderInfo,\n  WalletTypeEnum,\n} from \".\";\nimport type { UseSolanaError } from \"./error\";\nimport { ErrorLevel } from \"./error\";\nimport type { UnknownWalletType, WalletProviderMap } from \"./providers\";\nimport { DEFAULT_WALLET_PROVIDERS } from \"./providers\";\nimport { LOCAL_STORAGE_ADAPTER } from \"./storage\";\nimport type {\n  ConnectionArgs,\n  ConnectionContext,\n} from \"./utils/useConnectionInternal\";\nimport { useConnectionInternal } from \"./utils/useConnectionInternal\";\nimport type { UseProvider, UseProviderArgs } from \"./utils/useProviderInternal\";\nimport { useProviderInternal } from \"./utils/useProviderInternal\";\nimport type { UseWallet, UseWalletArgs } from \"./utils/useWalletInternal\";\nimport { useWalletInternal } from \"./utils/useWalletInternal\";\n\nexport interface UseSolana<\n  WalletType extends WalletTypeEnum<WalletType> = typeof DefaultWalletType,\n  Connected extends boolean = boolean\n> extends ConnectionContext,\n    UseWallet<WalletType, Connected>,\n    UseProvider {}\n\nexport interface UseSolanaArgs<\n  WalletType extends WalletTypeEnum<WalletType> = typeof DefaultWalletType\n> extends Omit<ConnectionArgs, \"storageAdapter\">,\n    Partial<\n      Pick<\n        UseWalletArgs<WalletType>,\n        | \"onConnect\"\n        | \"onDisconnect\"\n        | \"storageAdapter\"\n        | \"walletProviders\"\n        | \"walletOptions\"\n      >\n    >,\n    Pick<UseProviderArgs, \"broadcastConnections\" | \"confirmOptions\"> {\n  /**\n   * Called when an error is thrown.\n   */\n  onError?: (err: UseSolanaError) => void;\n}\n\nconst defaultOnConnect = (\n  wallet: WalletAdapter<true>,\n  provider: WalletProviderInfo\n) => {\n  console.log(\n    `Connected to ${provider.name} wallet: ${wallet.publicKey.toString()}`\n  );\n};\n\nconst defaultOnDisconnect = (\n  _wallet: WalletAdapter<false>,\n  provider: WalletProviderInfo\n) => {\n  console.log(`Disconnected from ${provider.name} wallet`);\n};\n\nconst defaultOnError = (err: UseSolanaError) => {\n  if (err.level === ErrorLevel.WARN) {\n    console.warn(err);\n  } else {\n    console.error(err);\n  }\n};\n\n/**\n * Provides Solana.\n * @returns\n */\nconst useSolanaInternal = <WalletType extends WalletTypeEnum<WalletType>>({\n  onConnect = defaultOnConnect,\n  onDisconnect = defaultOnDisconnect,\n  onError = defaultOnError,\n  storageAdapter = LOCAL_STORAGE_ADAPTER,\n  walletProviders = DEFAULT_WALLET_PROVIDERS as unknown as WalletProviderMap<WalletType>,\n  walletOptions,\n\n  // useProvider args\n  broadcastConnections,\n  confirmOptions,\n\n  ...connectionArgs\n}: UseSolanaArgs<WalletType> = {}): UseSolana<WalletType> => {\n  const connectionCtx = useConnectionInternal({\n    ...connectionArgs,\n    storageAdapter,\n  });\n  const { network, endpoint } = connectionCtx;\n  const walletCtx = useWalletInternal<WalletType>({\n    onConnect,\n    onDisconnect,\n    network,\n    endpoint,\n    onError,\n    storageAdapter,\n    walletProviders,\n    walletOptions,\n  });\n  const providerCtx = useProviderInternal({\n    connection: connectionCtx.connection,\n    wallet: walletCtx.wallet,\n    sendConnection: connectionCtx.sendConnection,\n    commitment: connectionArgs.commitment,\n\n    broadcastConnections,\n    confirmOptions,\n  });\n\n  return {\n    ...walletCtx,\n    ...connectionCtx,\n    ...providerCtx,\n  };\n};\n\nconst Solana = createContainer<\n  UseSolana<UnknownWalletType>,\n  UseSolanaArgs<UnknownWalletType>\n>(useSolanaInternal);\n\ntype ProviderProps<WalletType extends WalletTypeEnum<WalletType>> =\n  UseSolanaArgs<WalletType> & { children: ReactNode };\n\n/**\n * Provides a Solana SDK.\n *\n * Note: ensure that `onConnect` and `onDisconnect` are wrapped in useCallback or are\n * statically defined, otherwise the wallet will keep re-rendering.\n * @returns\n */\nexport const SolanaProvider = <\n  WalletType extends WalletTypeEnum<WalletType> = typeof DefaultWalletType\n>({\n  children,\n  ...args\n}: ProviderProps<WalletType>) => (\n  <Solana.Provider initialState={args}>{children}</Solana.Provider>\n);\n\n/**\n * Fetches the loaded Solana SDK.\n */\nexport const useSolana = <WalletType extends WalletTypeEnum<WalletType>>() =>\n  useContainer(\n    Solana as unknown as Container<\n      UseSolana<WalletType>,\n      UseSolanaArgs<WalletType>\n    >\n  );\n"]}