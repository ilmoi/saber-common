{"version":3,"file":"useWalletInternal.js","sourceRoot":"","sources":["../../../src/utils/useWalletInternal.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Network } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport stringify from \"fast-json-stable-stringify\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport type {\n  ConnectedWallet,\n  WalletAdapter,\n  WalletOptions,\n} from \"../adapters/types\";\nimport { WrappedWalletAdapter } from \"../adapters/types\";\nimport type { UseSolanaError } from \"../error\";\nimport {\n  WalletActivateError,\n  WalletAutomaticConnectionError,\n  WalletDisconnectError,\n} from \"../error\";\nimport type {\n  WalletProviderInfo,\n  WalletProviderMap,\n  WalletTypeEnum,\n} from \"../providers\";\nimport type { StorageAdapter } from \"../storage\";\nimport { usePersistedKVStore } from \"./usePersistedKVStore\";\n\n/**\n * Wallet-related information.\n */\nexport interface UseWallet<\n  WalletType extends WalletTypeEnum<WalletType>,\n  Connected extends boolean = boolean\n> {\n  /**\n   * Wallet.\n   */\n  wallet?: WalletAdapter<Connected>;\n  /**\n   * Wallet public key.\n   */\n  publicKey: Connected extends true ? PublicKey : undefined;\n  /**\n   * Information about the wallet used.\n   */\n  walletProviderInfo?: WalletProviderInfo;\n  /**\n   * Whether the provider is switching to a new wallet.\n   */\n  walletActivating: boolean;\n  /**\n   * Whether or not the wallet is connected.\n   */\n  connected: Connected;\n  /**\n   * Activates a new wallet.\n   */\n  activate: (\n    walletType: WalletType[keyof WalletType],\n    walletArgs?: Record<string, unknown>\n  ) => Promise<void>;\n  /**\n   * Disconnects the wallet and prevents auto-reconnect.\n   */\n  disconnect: () => Promise<void>;\n}\n\nexport interface UseWalletArgs<WalletType extends WalletTypeEnum<WalletType>> {\n  onConnect: (\n    wallet: WalletAdapter<true>,\n    provider: WalletProviderInfo\n  ) => void;\n  onDisconnect: (\n    wallet: WalletAdapter<false>,\n    provider: WalletProviderInfo\n  ) => void;\n  onError: (err: UseSolanaError) => void;\n  network: Network;\n  endpoint: string;\n  storageAdapter: StorageAdapter;\n  walletProviders: WalletProviderMap<WalletType>;\n  walletOptions?: WalletOptions;\n}\n\ninterface WalletConfig<WalletType extends WalletTypeEnum<WalletType>> {\n  walletType: keyof WalletType;\n  walletArgs: Record<string, unknown> | null;\n}\n\nexport const useWalletInternal = <\n  WalletType extends WalletTypeEnum<WalletType>\n>({\n  onConnect,\n  onDisconnect,\n  network,\n  endpoint,\n  onError,\n  storageAdapter,\n  walletProviders,\n  walletOptions,\n}: UseWalletArgs<WalletType>): UseWallet<WalletType, boolean> => {\n  const [walletConfigStr, setWalletConfigStr] = usePersistedKVStore<\n    string | null\n  >(\"use-solana/wallet-config\", null, storageAdapter);\n\n  const walletConfig: WalletConfig<WalletType> | null = useMemo(() => {\n    try {\n      return walletConfigStr\n        ? (JSON.parse(walletConfigStr) as WalletConfig<WalletType>)\n        : null;\n    } catch (e) {\n      console.warn(\"Error parsing wallet config\", e);\n      return null;\n    }\n  }, [walletConfigStr]);\n  const { walletType, walletArgs } = walletConfig ?? {\n    walletType: null,\n    walletArgs: null,\n  };\n\n  const [connected, setConnected] = useState(false);\n  const [walletActivating, setWalletActivating] = useState(false);\n\n  const [walletProviderInfo, wallet]:\n    | readonly [WalletProviderInfo, WalletAdapter]\n    | readonly [undefined, undefined] = useMemo(() => {\n    if (walletType) {\n      const provider = walletProviders[walletType];\n      console.debug(\"New wallet\", provider.url, network);\n      const adapter = provider.makeAdapter(\n        provider.url,\n        endpoint,\n        walletOptions\n      );\n      return [provider, new WrappedWalletAdapter(adapter)];\n    }\n    return [undefined, undefined];\n  }, [walletProviders, walletType, network, endpoint, walletOptions]);\n\n  useEffect(() => {\n    let disabled = false;\n    let timeout: NodeJS.Timeout | null = null;\n\n    if (wallet && walletProviderInfo) {\n      timeout = setTimeout(() => {\n        // Try connecting the wallet.\n        // If we get a WalletNotReadyError, the wallet isn't ready yet,\n        // so we should retry connecting, up to MAX_RETRIES times.\n        void (async () => {\n          let numRetries = 0;\n          const MAX_RETRIES = 10;\n          let shouldTryConnect = true;\n          while (shouldTryConnect) {\n            try {\n              await wallet.connect(walletArgs);\n            } catch (e) {\n              if ((e as Error)?.name === \"WalletNotReadyError\") {\n                console.warn(\"Got WalletNotReadyError, retrying...\");\n                numRetries++;\n                if (numRetries <= MAX_RETRIES) {\n                  await new Promise((e) => setTimeout(e, 1_000));\n                  continue;\n                }\n              }\n              onError(\n                new WalletAutomaticConnectionError(e, walletProviderInfo)\n              );\n            }\n            shouldTryConnect = false;\n          }\n        })();\n      }, 1_000);\n      wallet.on(\"connect\", () => {\n        if (disabled) {\n          return;\n        }\n        if (wallet.publicKey) {\n          setConnected(true);\n          setWalletActivating(false);\n          onConnect(wallet as ConnectedWallet, walletProviderInfo);\n        }\n      });\n\n      wallet.on(\"disconnect\", () => {\n        if (disabled) {\n          return;\n        }\n        setConnected(false);\n        setWalletActivating(false);\n        onDisconnect(wallet as WalletAdapter<false>, walletProviderInfo);\n      });\n    }\n\n    return () => {\n      if (wallet && wallet.connected) {\n        const disconnect = wallet.disconnect();\n        if (disconnect) {\n          disconnect.catch((e) => {\n            onError(new WalletDisconnectError(e, walletProviderInfo));\n          });\n        }\n      }\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      disabled = true;\n    };\n  }, [\n    onConnect,\n    onDisconnect,\n    onError,\n    wallet,\n    walletArgs,\n    walletProviderInfo,\n  ]);\n\n  const activate = useCallback(\n    async (\n      nextWalletType: WalletType[keyof WalletType],\n      nextWalletArgs?: Record<string, unknown>\n    ): Promise<void> => {\n      setWalletActivating(true);\n      const nextWalletConfigStr = stringify({\n        walletType: nextWalletType,\n        walletArgs: nextWalletArgs ?? null,\n      });\n      if (walletConfigStr === nextWalletConfigStr) {\n        // reconnect\n        try {\n          await wallet?.connect(nextWalletArgs);\n        } catch (e) {\n          onError(\n            new WalletActivateError<WalletType>(\n              e,\n              nextWalletType,\n              nextWalletArgs\n            )\n          );\n        }\n        setWalletActivating(false);\n      }\n      await setWalletConfigStr(nextWalletConfigStr);\n    },\n    [onError, setWalletConfigStr, wallet, walletConfigStr]\n  );\n\n  const disconnect = useCallback(async () => {\n    await wallet?.disconnect();\n    await setWalletConfigStr(null);\n  }, [setWalletConfigStr, wallet]);\n\n  return {\n    wallet,\n    walletProviderInfo,\n    walletActivating,\n    connected,\n    publicKey: wallet?.publicKey ?? undefined,\n    activate,\n    disconnect,\n  };\n};\n"]}