{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../../src/utils/provider.ts"],"names":[],"mappings":";;;;AAKA,4DAMiC;AAOjC,4EAAuC;AAIvC,MAAa,8BAA+B,SAAQ,wCAAuB;IACzE,YACW,UAAsB,EACb,MAAuB,EACzC,WAAwB,EACxB,sBAAkC,WAAW;QAE7C,KAAK,CAAC,MAAM,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;QALvC,eAAU,GAAV,UAAU,CAAY;QACb,WAAM,GAAN,MAAM,CAAiB;IAK3C,CAAC;IAEQ,KAAK,CAAC,2BAA2B,CACxC,WAAwB,EACxB,IAA8B;QAE9B,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAClD,WAAW,EACX,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,IAAI,CACL,CAAC;IACJ,CAAC;CACF;AArBD,wEAqBC;AAED,MAAa,qBAAsB,SAAQ,+BAAc;IACvD;;;;;OAKG;IACH,YACE,UAAsB,EACtB,WAAwB,EACN,MAAuB,EACzC,OAAuB,yCAAwB;QAE/C,KAAK,CACH,UAAU,EACV,WAAW,EACX,MAAM,EACN,IAAI,EACJ,IAAI,8BAA8B,CAChC,UAAU,EACV,MAAM,EACN,WAAW,EACX,IAAI,CAAC,mBAAmB,CACzB,CACF,CAAC;QAdgB,WAAM,GAAN,MAAM,CAAiB;IAe3C,CAAC;IAED;;OAEG;IACH,MAAM,CAAU,IAAI,CAAC,EACnB,UAAU,EACV,oBAAoB,GAAG,CAAC,UAAU,CAAC,EACnC,MAAM,EACN,IAAI,GAAG,yCAAwB,GAkBhC;QACC,MAAM,wBAAwB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;QACzD,IAAA,wBAAS,EACP,wBAAwB,EACxB,6CAA6C,CAC9C,CAAC;QACF,OAAO,IAAI,qBAAqB,CAC9B,UAAU,EACV,oBAAoB,CAAC,MAAM,GAAG,CAAC;YAC7B,CAAC,CAAC,IAAI,kCAAiB,CAAC,UAAU,EAAE,oBAAoB,EAAE,IAAI,CAAC;YAC/D,CAAC,CAAC,IAAI,4CAA2B,CAAC,wBAAwB,EAAE,IAAI,CAAC,EACnE,MAAM,EACN,IAAI,CACL,CAAC;IACJ,CAAC;CACF;AAnED,sDAmEC","sourcesContent":["import type {\n  Broadcaster,\n  PendingTransaction,\n  SignAndBroadcastOptions,\n} from \"@saberhq/solana-contrib\";\nimport {\n  DEFAULT_PROVIDER_OPTIONS,\n  SingleConnectionBroadcaster,\n  SolanaProvider,\n  SolanaTransactionSigner,\n  TieredBroadcaster,\n} from \"@saberhq/solana-contrib\";\nimport type {\n  Commitment,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n} from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport type { ConnectedWallet } from \"../adapters\";\n\nexport class WalletAdapterTransactionSigner extends SolanaTransactionSigner {\n  constructor(\n    readonly connection: Connection,\n    override readonly wallet: ConnectedWallet,\n    broadcaster: Broadcaster,\n    preflightCommitment: Commitment = \"confirmed\"\n  ) {\n    super(wallet, broadcaster, preflightCommitment);\n  }\n\n  override async signAndBroadcastTransaction(\n    transaction: Transaction,\n    opts?: SignAndBroadcastOptions\n  ): Promise<PendingTransaction> {\n    return await this.wallet.signAndBroadcastTransaction(\n      transaction,\n      this.connection,\n      this.broadcaster,\n      opts\n    );\n  }\n}\n\nexport class WalletAdapterProvider extends SolanaProvider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param sendConnection The connection where transactions are sent to.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(\n    connection: Connection,\n    broadcaster: Broadcaster,\n    override readonly wallet: ConnectedWallet,\n    opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS\n  ) {\n    super(\n      connection,\n      broadcaster,\n      wallet,\n      opts,\n      new WalletAdapterTransactionSigner(\n        connection,\n        wallet,\n        broadcaster,\n        opts.preflightCommitment\n      )\n    );\n  }\n\n  /**\n   * Initializes a new SolanaProvider.\n   */\n  static override init({\n    connection,\n    broadcastConnections = [connection],\n    wallet,\n    opts = DEFAULT_PROVIDER_OPTIONS,\n  }: {\n    /**\n     * Connection used for general reads\n     */\n    readonly connection: Connection;\n    /**\n     * Connections used for broadcasting transactions. Defaults to the read connection.\n     */\n    readonly broadcastConnections?: readonly Connection[];\n    /**\n     * Wallet used for signing transactions\n     */\n    readonly wallet: ConnectedWallet;\n    /**\n     * Confirmation options\n     */\n    readonly opts?: ConfirmOptions;\n  }): WalletAdapterProvider {\n    const firstBroadcastConnection = broadcastConnections[0];\n    invariant(\n      firstBroadcastConnection,\n      \"must have at least one broadcast connection\"\n    );\n    return new WalletAdapterProvider(\n      connection,\n      broadcastConnections.length > 1\n        ? new TieredBroadcaster(connection, broadcastConnections, opts)\n        : new SingleConnectionBroadcaster(firstBroadcastConnection, opts),\n      wallet,\n      opts\n    );\n  }\n}\n"]}