{"version":3,"file":"core.js","sourceRoot":"","sources":["../../../../src/adapters/ledger/core.ts"],"names":[],"mappings":"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","sourcesContent":["import type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\n\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\n\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\n\nconst MAX_PAYLOAD = 255;\n\nconst LEDGER_CLA = 0xe0;\n\n/*\n * Helper for chunked send of large payloads\n */\nasync function ledgerSend(\n  transport: Transport,\n  instruction: number,\n  p1: number,\n  payload: Buffer\n) {\n  let p2 = 0;\n  let payloadOffset = 0;\n\n  if (payload.length > MAX_PAYLOAD) {\n    while (payload.length - payloadOffset > MAX_PAYLOAD) {\n      const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n      payloadOffset += MAX_PAYLOAD;\n      const reply = await transport.send(\n        LEDGER_CLA,\n        instruction,\n        p1,\n        p2 | P2_MORE,\n        chunk\n      );\n      if (reply.length !== 2) {\n        throw new Error(\"Received unexpected reply payload\");\n      }\n      p2 |= P2_EXTEND;\n    }\n  }\n\n  const chunk = payload.slice(payloadOffset);\n  const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n\n  return reply.slice(0, reply.length - 2);\n}\n\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n = 0) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nexport function getSolanaDerivationPath(\n  account?: number,\n  change?: number\n): Buffer {\n  let length;\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  const derivationPath = Buffer.alloc(1 + length * 4);\n  // eslint-disable-next-line\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      // eslint-disable-next-line unused-imports/no-unused-vars,@typescript-eslint/no-unused-vars\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\n\nexport async function signTransaction(\n  transport: Transport,\n  transaction: Transaction,\n  derivationPath: Buffer = getSolanaDerivationPath()\n): Promise<Buffer> {\n  const messageBytes = transaction.serializeMessage();\n  return signBytes(transport, messageBytes, derivationPath);\n}\n\nexport async function signBytes(\n  transport: Transport,\n  bytes: Buffer,\n  derivationPath: Buffer = getSolanaDerivationPath()\n): Promise<Buffer> {\n  const numPaths = Buffer.alloc(1);\n  numPaths.writeUInt8(1, 0);\n\n  const payload = Buffer.concat([numPaths, derivationPath, bytes]);\n\n  // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n  // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n  return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n}\n\nexport async function getPublicKey(\n  transport: Transport,\n  derivationPath: Buffer = getSolanaDerivationPath()\n): Promise<PublicKey> {\n  const publicKeyBytes = await ledgerSend(\n    transport,\n    INS_GET_PUBKEY,\n    P1_NON_CONFIRM,\n    derivationPath\n  );\n\n  return new PublicKey(publicKeyBytes);\n}\n"]}