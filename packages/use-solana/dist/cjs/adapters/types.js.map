{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/adapters/types.ts"],"names":[],"mappings":";;;AAMA,4DAAoD;AA2CpD;;GAEG;AACH,MAAa,oBAAoB;IAG/B,YAAqB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;QAE9C,gBAAW,GAA2B,IAAI,CAAC;QAC3C,qBAAgB,GAAqB,IAAI,CAAC;IAHO,CAAC;IAK1D,IAAI,SAAS;QACX,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO,IAAiD,CAAC;SAC1D;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gBAC/C,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACzB,OAAO,IAAI,CAAC,gBAEJ,CAAC;iBACV;aACF;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YAC1C,IAAI,CAAC,gBAAgB,GAAG,IAAI,0BAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,OAAO,IAAI,CAAC,gBAA6D,CAAC;SAC3E;QACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IAClC,CAAC;IAED,IAAI,SAAS;QACX,OAAO,CACL,IAAI,CAAC,OAAO,CAAC,SAAS;YACtB,sFAAsF;YACrF,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAuB,CACxC,CAAC;IACJ,CAAC;IAED,2BAA2B,CACzB,WAAwB,EACxB,UAAsB,EACtB,WAAwB,EACxB,IAA8B;QAE9B,OAAO,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAC7C,WAAW,EACX,UAAU,EACV,WAAW,EACX,IAAI,CACL,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,WAAwB;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAED,mBAAmB,CAAC,WAA0B;QAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,CAAC,IAAc;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,EAAE,CAAC,KAA+B,EAAE,EAAc;QAChD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF;AA1ED,oDA0EC","sourcesContent":["import type {\n  Broadcaster,\n  PendingTransaction,\n  SignAndBroadcastOptions,\n  Wallet,\n} from \"@saberhq/solana-contrib\";\nimport { PublicKey } from \"@saberhq/solana-contrib\";\nimport type { WalletConnectWalletAdapterConfig } from \"@solana/wallet-adapter-walletconnect\";\nimport type {\n  Connection,\n  PublicKey as SolanaPublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport interface WalletAdapter<Connected extends boolean = boolean>\n  extends Omit<Wallet, \"publicKey\"> {\n  publicKey: Connected extends true ? SolanaPublicKey : null;\n  autoApprove: boolean;\n  connected: Connected;\n\n  connect: (args?: unknown) => Promise<void>;\n  disconnect: () => void | Promise<void>;\n  on(event: \"connect\" | \"disconnect\", fn: () => void): void;\n\n  /**\n   * Signs and broadcasts a transaction.\n   *\n   * @param transaction\n   * @param broadcaster\n   * @param options\n   */\n  signAndBroadcastTransaction(\n    transaction: Transaction,\n    connection: Connection,\n    broadcaster: Broadcaster,\n    opts?: SignAndBroadcastOptions\n  ): Promise<PendingTransaction>;\n}\n\nexport type ConnectedWallet = WalletAdapter<true> & Wallet;\n\nexport type WalletOptions = WalletConnectWalletAdapterConfig;\n\nexport type WalletAdapterBuilder = (\n  providerUrl: string,\n  endpoint: string,\n  options?: WalletOptions\n) => WalletAdapter;\n\n/**\n * Wallet adapter wrapper with caching of the PublicKey built-in.\n */\nexport class WrappedWalletAdapter<Connected extends boolean = boolean>\n  implements Omit<WalletAdapter<Connected>, \"publicKey\">\n{\n  constructor(readonly adapter: WalletAdapter<Connected>) {}\n\n  private _prevPubkey: SolanaPublicKey | null = null;\n  private _publicKeyCached: PublicKey | null = null;\n\n  get publicKey(): Connected extends true ? PublicKey : null {\n    if (!this.connected) {\n      return null as Connected extends true ? PublicKey : null;\n    }\n    if (this.adapter.publicKey) {\n      if (this.adapter.publicKey === this._prevPubkey) {\n        if (this._publicKeyCached) {\n          return this._publicKeyCached as Connected extends true\n            ? PublicKey\n            : null;\n        }\n      }\n      this._prevPubkey = this.adapter.publicKey;\n      this._publicKeyCached = new PublicKey(this.adapter.publicKey.toString());\n      return this._publicKeyCached as Connected extends true ? PublicKey : null;\n    }\n    throw new Error(\"Invalid wallet connection state\");\n  }\n\n  get autoApprove(): boolean {\n    return this.adapter.autoApprove;\n  }\n\n  get connected(): Connected {\n    return (\n      this.adapter.connected &&\n      // need this branch b/c Solflare adapter does not respect the connected state properly\n      (!!this.adapter.publicKey as Connected)\n    );\n  }\n\n  signAndBroadcastTransaction(\n    transaction: Transaction,\n    connection: Connection,\n    broadcaster: Broadcaster,\n    opts?: SignAndBroadcastOptions\n  ): Promise<PendingTransaction> {\n    return this.adapter.signAndBroadcastTransaction(\n      transaction,\n      connection,\n      broadcaster,\n      opts\n    );\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.adapter.signTransaction(transaction);\n  }\n\n  signAllTransactions(transaction: Transaction[]): Promise<Transaction[]> {\n    return this.adapter.signAllTransactions(transaction);\n  }\n\n  connect(args?: unknown): Promise<void> {\n    return this.adapter.connect(args);\n  }\n\n  async disconnect(): Promise<void> {\n    await this.adapter.disconnect();\n    this._prevPubkey = null;\n    this._publicKeyCached = null;\n  }\n\n  on(event: \"connect\" | \"disconnect\", fn: () => void): void {\n    this.adapter.on(event, fn);\n  }\n}\n"]}