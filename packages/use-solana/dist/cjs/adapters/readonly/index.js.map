{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/adapters/readonly/index.ts"],"names":[],"mappings":";;;AAMA,6CAA4C;AAC5C,iDAA6C;AAa7C;;;GAGG;AACI,MAAM,uBAAuB,GAAG,CAAC,MAAiB,EAAQ,EAAE;IACjE,MAAM,CAAC,0BAA0B,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;AACxD,CAAC,CAAC;AAFW,QAAA,uBAAuB,2BAElC;AAEF;;GAEG;AACH,MAAa,eAAgB,SAAQ,4BAAY;IAG/C;;QACE,KAAK,EAAE,CAAC;QAHF,eAAU,GAAqB,IAAI,CAAC;QA4C5C,YAAO,GAAG,GAAkB,EAAE;YAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACtC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC;QA3CA,MAAM,WAAW,GACf,MAAA,MAAA,MAAM,CAAC,0BAA0B,mCACjC,OAAO,CAAC,GAAG,CAAC,sBAAsB,mCAClC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAS,CAAC,WAAW,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,WAAW;QACb,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,2BAA2B,CACzB,YAAyB,EACzB,WAAuB,EACvB,YAAyB,EACzB,KAAwB;QAExB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAED,mBAAmB,CAAC,aAA4B;QAC9C,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAED,eAAe,CAAC,YAAyB;QACvC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAOD,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1B,CAAC;CACF;AArDD,0CAqDC","sourcesContent":["import type {\n  Broadcaster,\n  BroadcastOptions,\n  PendingTransaction,\n} from \"@saberhq/solana-contrib\";\nimport type { Connection, Transaction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { EventEmitter } from \"eventemitter3\";\n\nimport type { WalletAdapter } from \"../types\";\n\ndeclare global {\n  interface Window {\n    /**\n     * Allows setting the pubkey for the ReadonlyAdapter.\n     */\n    USE_SOLANA_PUBKEY_OVERRIDE?: string;\n  }\n}\n\n/**\n * Sets the readonly Solana pubkey.\n * @param pubkey\n */\nexport const setReadonlySolanaPubkey = (pubkey: PublicKey): void => {\n  window.USE_SOLANA_PUBKEY_OVERRIDE = pubkey.toString();\n};\n\n/**\n * Adapter that cannot sign transactions. Dummy for testing.\n */\nexport class ReadonlyAdapter extends EventEmitter implements WalletAdapter {\n  private _publicKey: PublicKey | null = null;\n\n  constructor() {\n    super();\n    const localPubkey =\n      window.USE_SOLANA_PUBKEY_OVERRIDE ??\n      process.env.REACT_APP_LOCAL_PUBKEY ??\n      process.env.LOCAL_PUBKEY;\n    if (!localPubkey) {\n      console.warn(\"LOCAL_PUBKEY not set for readonly provider\");\n    } else {\n      this._publicKey = new PublicKey(localPubkey);\n    }\n  }\n\n  get connected(): boolean {\n    return true;\n  }\n\n  get autoApprove(): boolean {\n    return false;\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  signAndBroadcastTransaction(\n    _transaction: Transaction,\n    _connection: Connection,\n    _broadcaster: Broadcaster,\n    _opts?: BroadcastOptions\n  ): Promise<PendingTransaction> {\n    throw new Error(\"readonly adapter cannot sign transactions\");\n  }\n\n  signAllTransactions(_transactions: Transaction[]): Promise<Transaction[]> {\n    throw new Error(\"readonly adapter cannot sign transactions\");\n  }\n\n  signTransaction(_transaction: Transaction): Promise<Transaction> {\n    throw new Error(\"readonly adapter cannot sign transactions\");\n  }\n\n  connect = (): Promise<void> => {\n    this.emit(\"connect\", this._publicKey);\n    return Promise.resolve();\n  };\n\n  disconnect(): void {\n    this.emit(\"disconnect\");\n  }\n}\n"]}