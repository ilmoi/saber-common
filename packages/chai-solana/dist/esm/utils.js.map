{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAQ1B,OAAO,EAAE,sBAAsB,EAAE,MAAM,yBAAyB,CAAC;AACjE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAEtC;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,EAA0C,EAC1C,GAAY,EACZ,EAAmD,EAC3B,EAAE;IAC1B,MAAM,aAAa,GAAG,KAAK,EAAE,OAA2B,EAAE,EAAE;QAC1D,MAAM,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAG,OAAO,CAAC,CAAA,CAAC;QACpB,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IAEF,IAAI,EAAE,IAAI,MAAM,IAAI,EAAE,EAAE;QACtB,OAAO,MAAM,CACX,EAAE;aACC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAChB,IAAI,CAAC,KAAK,IAAI,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;aACxC;YACD,OAAO,MAAM,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,EACtB,GAAG,CACJ,CAAC,UAAU,CAAC;KACd;SAAM,IAAI,EAAE,EAAE;QACb,OAAO,MAAM,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC;aAC/D,UAAU,CAAC;KACf;SAAM;QACL,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,EAAE,GAAG,CAAC;aACjE,UAAU,CAAC;KACf;AACH,CAAC,CAAC;AAIF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAe,EAAE,KAAe,EAAQ,EAAE;IACpE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C,CAAC,CAAC","sourcesContent":["import \"chai-as-promised\";\n\nimport type { Idl } from \"@project-serum/anchor\";\nimport type {\n  PromiseOrValue,\n  TransactionLike,\n  TransactionReceipt,\n} from \"@saberhq/solana-contrib\";\nimport { confirmTransactionLike } from \"@saberhq/solana-contrib\";\nimport { assert, expect } from \"chai\";\n\n/**\n * Processes a transaction, expecting rejection or fulfillment.\n *\n * @param tx\n * @param msg\n * @param cb\n * @returns\n */\nexport const expectTX = (\n  tx: PromiseOrValue<TransactionLike | null>,\n  msg?: string,\n  cb?: (receipt: TransactionReceipt) => Promise<void>\n): Chai.PromisedAssertion => {\n  const handleReceipt = async (receipt: TransactionReceipt) => {\n    await cb?.(receipt);\n    return receipt;\n  };\n\n  if (tx && \"then\" in tx) {\n    return expect(\n      tx\n        .then(async (v) => {\n          if (v === null) {\n            throw new Error(\"transaction is null\");\n          }\n          return await confirmTransactionLike(v);\n        })\n        .then(handleReceipt),\n      msg\n    ).eventually;\n  } else if (tx) {\n    return expect(confirmTransactionLike(tx).then(handleReceipt), msg)\n      .eventually;\n  } else {\n    return expect(Promise.reject(new Error(\"transaction is null\")), msg)\n      .eventually;\n  }\n};\n\nexport type IDLError = NonNullable<Idl[\"errors\"]>[number];\n\nexport const assertError = (error: IDLError, other: IDLError): void => {\n  assert.strictEqual(error.code, other.code);\n  assert.strictEqual(error.msg, other.msg);\n};\n"]}