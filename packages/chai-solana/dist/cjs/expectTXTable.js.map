{"version":3,"file":"expectTXTable.js","sourceRoot":"","sources":["../../src/expectTXTable.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IdlErrorCode } from \"@project-serum/anchor/dist/esm/idl.js\";\nimport { matchError, matchErrorCode } from \"@saberhq/anchor-contrib\";\nimport type { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport { parseTransactionLogs, printTXTable } from \"@saberhq/solana-contrib\";\n\nimport { formatInstructionLogsForConsole } from \"./printInstructionLogs.js\";\nimport { expectTX } from \"./utils.js\";\n\n/**\n * expectTXTable is a drop in replacement for expectTX with a cool table output like:\n * ```\n *    872 example message (tests/awesomeTest.spec.ts:583:29)\n *    ┌─────┬───┬───┬───┬───────────┬──────┬─────┬──────┬───┐\n *    │index│iso│mar│cum│ programId │quota │used │ left │CPI│\n *    ├─────┼───┼───┼───┼───────────┼──────┼─────┼──────┼───┤\n *    │  0  │298│281│464│'ATokenG..'│200000│24270│175730│ 1 │\n *    │  1  │298│ 74│538│'ATokenG..'│178730│21270│157460│ 1 │\n *    │  2  │298│ 74│612│'ATokenG..'│157460│27277│130183│ 1 │\n *    │  3  │298│ 42│686│'ATokenG..'│130183│21270│108913│ 1 │\n *    │  4  │338│265│951│'qExampL..'│108913│76289│ 32624│ 3 │\n *    └─────┴───┴───┴───┴───────────┴──────┴─────┴──────┴───┘\n * ```\n *\n * - **index**: the array index of the instruction within the transaction\n * - **iso**: the isolated size of the instruction (marginal cost of only the instruction)\n * - **mar**: the marginal size cost of the instruction (when added to previous)\n * - **cum**: the cumulative size of the instructions up until that instruction\n * - **quota/used/left**: [BPF instruction compute unit info](https://docs.solana.com/developing/programming-model/runtime)\n * - **CPI**: [the maximum depth of CPI](https://docs.solana.com/developing/programming-model/calling-between-programs) (current limit in Solana is 4)\n *\n * @param verbosity If \"printLogs\", will always print the logs of the simulation.\n * It's a string and not a boolean so you can easily search and comment it out if needed\n */\nexport const expectTXTable = (\n  tx: TransactionEnvelope,\n  msg?: string,\n  {\n    verbosity = null,\n    formatLogs = true,\n  }: {\n    /**\n     * Logging verbosity.\n     *\n     * - `always` -- print logs whenever they exist\n     * - `error` -- print logs only if there is an error\n     * - `null` -- never print the full transaction logs\n     */\n    verbosity?: \"always\" | \"error\" | null;\n    formatLogs?: boolean;\n  } = {\n    verbosity: null,\n    formatLogs: true,\n  }\n): Chai.PromisedAssertion => {\n  if (tx === null) {\n    throw new Error();\n  }\n\n  let relativePath: string | undefined;\n  const callStack = new Error().stack?.split(\"\\n\");\n  if (callStack) {\n    const expectIndex = callStack.findIndex((l) =>\n      l.includes(`at ${expectTXTable.name}`)\n    );\n    if (expectIndex > 0) {\n      const targetLine = callStack[expectIndex + 1];\n      if (targetLine) {\n        const cwd = process.cwd();\n        // get the part of targetLine after cwd\n        const targetLineAfterCwd = targetLine.substring(\n          targetLine.indexOf(cwd) + cwd.length\n        );\n        if (targetLineAfterCwd.length > 0) {\n          relativePath = targetLineAfterCwd.substring(1);\n        }\n      }\n    }\n  }\n\n  // Run the simulation before sending the tx to avoid a race condition.\n  void tx\n    .simulate()\n    .then((simulation) => {\n      if (simulation?.value?.logs) {\n        printTXTable(\n          tx,\n          simulation.value.logs,\n          `${msg ? msg + \" \" : \"\"}${relativePath ? `(${relativePath})` : \"\"}`\n        );\n      }\n\n      const logs = simulation.value.logs;\n      if (logs) {\n        if (\n          verbosity === \"always\" ||\n          (verbosity === \"error\" && simulation.value.err)\n        ) {\n          if (formatLogs) {\n            const parsed = parseTransactionLogs(logs, simulation.value.err);\n            const fmt = formatInstructionLogsForConsole(parsed);\n            console.log(fmt);\n          } else {\n            console.log(logs.join(\"\\n\"));\n          }\n        }\n\n        if (simulation.value.err) {\n          let lastLine = \"\";\n          for (let i = 0; i < logs.length; i++) {\n            const curLine = logs[i];\n            if (curLine) {\n              const errorCode = curLine.match(\n                /Program log: Custom program error: (0x[0-9a-f]*)/\n              );\n              if (errorCode && errorCode[1]) {\n                const programIdMatch = lastLine.split(\" \");\n\n                if (programIdMatch && programIdMatch[1]) {\n                  console.log(\n                    `    Program ${programIdMatch[1]} error:`,\n                    Number(errorCode[1])\n                  );\n                }\n              }\n              lastLine = curLine;\n            }\n          }\n          console.log(\"   \", JSON.stringify(simulation.value.err));\n        }\n      }\n    })\n    .catch((e) => {\n      if (e instanceof Error) {\n        console.log(e.message);\n      }\n    });\n\n  return expectTX(tx, (msg ?? \"\") + (relativePath ? ` (${relativePath})` : \"\"));\n};\n\n/**\n * Assert that a transaction is successful.\n * @param tx\n * @param msg\n * @returns\n */\nexport const assertTXSuccess = (\n  tx: TransactionEnvelope,\n  msg?: string\n): Chai.PromisedAssertion => {\n  return expectTX(tx, msg).to.be.fulfilled;\n};\n\n/**\n * Assert that a transaction will throw the given error.\n * @param tx\n * @param msg\n * @returns\n */\nexport const assertTXThrows = (\n  tx: TransactionEnvelope,\n  err: IdlErrorCode,\n  msg?: string\n): Chai.PromisedAssertion => {\n  return expectTX(tx, msg).to.be.rejectedWith(matchError(err));\n};\n\n/**\n * Assert that a transaction will throw the given error.\n * @param tx\n * @param msg\n * @returns\n */\nexport const assertTXThrowsCode = (\n  tx: TransactionEnvelope,\n  code: number,\n  msg?: string\n): Chai.PromisedAssertion => {\n  return expectTX(tx, msg).to.be.rejectedWith(matchErrorCode(code));\n};\n"]}